README for RDF Schema backend


CHANGES

01-MAR-04  updated installation instructions
04-Jun-03  updated installation instructions
18-Mar-02  fixed bug that messed range and constraints of included properties
23-Sep-02  added user-defined facets
26-Jan-01  improved OIL support (now beta)
24-Jan-01  added (alpha) OIL support (includes widgets for OIL expressions);
           uses new RDF API (requires Protege 1.5 beta build 656 or higher)
18-Jan-01  first public beta release


INSTALLATION

Please note that these instructions are *only* applicable if you're using
Protege 1.9 and higher.  If you're using any previous version of Protege, 
the RDF Backend came as part of the standard installation.

1. Unzip the rdf_backend.jar and rdf-api.jar files into your Protege\plugins 
   directory.  Make sure you preserve the path information in the ZIP file 
   so that the proper subdirectory is created under the plugins directory for 
   the JAR files.  After unzipping, you should have something like:

   Protege\plugins\edu.stanford.smi.protegex.rdf_backend\rdf_backend.jar
   Protege\plugins\edu.stanford.smi.protegex.rdf_backend\rdf-api.jar


OVERVIEW

We have re-implemented our RDF Schema support in order to make it
more stable and to make it easier to implement other RDFS-based 
backends such as OIL and DAML. Furthermore, several features were
added, such as

- in addition to a round-trip version, you can export as simple RDFS 
  (i.e., Protege specific facets are not encoded in additional
  triples)

- support for namespace abbreviations (frame names are never
  prefixed with complete URIs, only with abbreviations)

- when exporting a project that has included projects, you can
  put the included projects into different namespaces. An
  explanation of how to do this can be found at the end
  of this file


RENAMING THE DEFAULT NAMESPACES OF INCLUDED PROJECTS

This feature can be used to transform an old (CLIPS) project into an RDF
one where frames from included projects reside in different namespaces.

You can also achieve the reverse effect, i.e. forcing all (or some)
projects to share a namespace or have the same namespace as the
main project.

Here is how it works:

1. Transform the project into an RDF one where ALL projects (main and
   included ones) have the SAME default namespace.
   You need to do this "bottom up", i.e., for the included projects
   first, and finally for the main one. Make sure you save all files
   with new file names (or in a new directory), or the main file does
   not load any more (since it will already try to load the new included
   projects)!

2. Load the new main project and click "Save as ...". If you have
   included projects that were loaded with the RDF backend,
   you will see an "Advanced ..." button. Change some or all of 
   the namespaces and save (the console window will show a remark 
   if namespaces of included projects are renamed).
   Close the project.

3. For each of the included projects for which you have renamed the
   default namespace, load and change the namespace (via "Save as").

4. You can now load the main project.



KNOWN BUGS AND PROBLEMS

- only the RDF Schema namespace http://www.w3.org/TR/1999/PR-rdf-schema-19990303#
  is supported when saving (on import, the new namespace is also recognized)
  
- namespace abbreviations cannot be edited (they are automatically generated)
  
- rdfs:seeAlso, rdfs:isDefinedBy, rdfs:label, container, and reified statements
  are not supported
  
- multiple types for a single resource are not supported

- you cannot make changes to the standard meta classes (i.e., rdf:Resource,
  rdf:Property, rdfs:Class, etc.)

- XML Schema data types are not recognized as rdfs:Literal (but it is unclear
  if they should)
  
- OIL backend:
  - no documentation
  - only supports OIL namespace 
    http://www.ontoknowledge.org/oil/rdf-schema/2000/11/10-oil-standard
  - is not feature-complete (only supports features that can directly be
    mapped to FaCT DL reasoner)
  - output contains some Protege specific encodings to allow full roundtrip
    (in separate namespace)
  
  
Report bugs, suggestions, comments to:

Michael Sintek
email: sintek@smi.stanford.edu

